{
    "not": {
        "description": "! operator",
        "prefix": "not",
        "body": [
            "!${1:expression}"
        ]
    },
    "compare to": {
        "description": "comparison operator",
        "prefix": "compare-to",
        "body": [
            "${1:expression} ${2|<,>,<=,>=,==,!=|} ${3:expression}"
        ]
    },
    "and": {
        "description": "&& operator",
        "prefix": "and",
        "body": [
            "${1:expression} && ${2:expression}"
        ]
    },
    "or": {
        "description": "|| operator",
        "prefix": "or",
        "body": [
            "${1:expression} || ${2:expression}"
        ]
    },
    "bash if": {
        "description": "if operator",
        "prefix": "bash:if",
        "body": [
            "if ${1:command}; then",
            "\t$0",
            "fi"
        ]
    },
    "bash if else": {
        "description": "if else operator",
        "prefix": "bash:if-else",
        "body": [
            "if ${1:command}; then",
            "\t${2:echo}",
            "else",
            "\t$0",
            "fi"
        ]
    },
    "bash while": {
        "description": "while operator",
        "prefix": "bash:while",
        "body": [
            "while ${1:command}; do",
            "\t$0",
            "done"
        ]
    },
    "bash until": {
        "description": "until operator",
        "prefix": "bash:until",
        "body": [
            "until ${1:command}; do",
            "\t$0",
            "done"
        ]
    },
    "bash for": {
        "description": "for operator",
        "prefix": "bash:for",
        "body": [
            "for ${1:variable} in ${2:list}; do",
            "\t$0",
            "done"
        ]
    },
    "cmd if": {
        "description": "if operator",
        "prefix": "cmd:if",
        "body": [
            "if ${1:command} (",
            "\t$0",
            ")"
        ]
    },
    "cmd if else": {
        "description": "if else operator",
        "prefix": "cmd:if-else",
        "body": [
            "if ${1:command} (",
            "\t${2:echo}",
            ") else (",
            "\t$0",
            ")"
        ]
    },
    "cmd for": {
        "description": "for operator",
        "prefix": "cmd:for",
        "body": [
            "for %%${1:variable} in (${2:list}) do (",
            "\t$0",
            ")"
        ]
    },
    "pwsh if": {
        "description": "if operator",
        "prefix": "pwsh:if",
        "body": [
            "if (${1:command})",
            "{",
            "\t$0",
            "}"
        ]
    },
    "pwsh if else": {
        "description": "if else operator",
        "prefix": "pwsh:if-else",
        "body": [
            "if (${1:command})",
            "{",
            "\t${2:echo}",
            "}",
            "else",
            "{",
            "\t$0",
            "}"
        ]
    },
    "pwsh while": {
        "description": "while operator",
        "prefix": "pwsh:while",
        "body": [
            "while (${1:command})",
            "{",
            "\t$0",
            "}"
        ]
    },
    "pwsh do": {
        "description": "do operator",
        "prefix": "pwsh:do",
        "body": [
            "do",
            "{",
            "\t$0",
            "}",
            "while (${1:command})"
        ]
    },
    "pwsh for": {
        "description": "for operator",
        "prefix": "pwsh:for",
        "body": [
            "for (${1:variable}=${2:value}; ${3:condition}; ${4:command})",
            "{",
            "\t$0",
            "}"
        ]
    },
    "pwsh foreach": {
        "description": "foreach operator",
        "prefix": "pwsh:foreach",
        "body": [
            "for (${1:item} in ${2:list})",
            "{",
            "\t$0",
            "}"
        ]
    },
    "sed filter by pattern": {
        "description": "pattern filter",
        "prefix": "sed:filter-by-pattern",
        "body": [
            "sed ${1|--regexp-extended,-E|} ${2|--quiet,-n|} '/${3:pattern}/p' ${4:path/to/file}"
        ]
    },
    "sed filter by line number": {
        "description": "line number filter",
        "prefix": "sed:filter-by-line-number",
        "body": [
            "sed ${1|--regexp-extended,-E|} ${2|--quiet,-n|} '${3:number}p' ${4:path/to/file}"
        ]
    },
    "sed filter by line numbers": {
        "description": "line number filter",
        "prefix": "sed:filter-by-line-numbers",
        "body": [
            "sed ${1|--regexp-extended,-E|} ${2|--quiet,-n|} '${3:from},${4:to}p' ${5:path/to/file}"
        ]
    },
    "sed replace single": {
        "description": "singule replacement",
        "prefix": "sed:single-replacement",
        "body": [
            "sed ${1|--regexp-extended,-E|} 's/${2:pattern}/${3:replacement}/' ${4:path/to/file}"
        ]
    },
    "sed replace globally": {
        "description": "global replacement",
        "prefix": "sed:global-replacement",
        "body": [
            "sed ${1|--regexp-extended,-E|} 's/${2:pattern}/${3:replacement}/g' ${4:path/to/file}"
        ]
    },
    "sed transliterate": {
        "description": "transliteration",
        "prefix": "sed:transliteration",
        "body": [
            "sed ${1|--regexp-extended,-E|} 'y/${2:source-characters}/${3:replacement-characters}/g' ${4:path/to/file}"
        ]
    },
    "awk filter by pattern": {
        "description": "pattern filter",
        "prefix": "awk:filter-by-pattern",
        "body": [
            "awk '/${1:pattern}/' ${2:path/to/file}"
        ]
    },
    "awk filter by line number": {
        "description": "line number filter",
        "prefix": "awk:filter-by-line-number",
        "body": [
            "awk 'NR == ${1:number}' ${2:path/to/file}"
        ]
    },
    "awk filter by line numbers": {
        "description": "line number filter",
        "prefix": "awk:filter-by-line-numbers",
        "body": [
            "awk 'NR >= ${1:from} && NR <= ${2:to}' ${3:path/to/file}"
        ]
    },
    "awk replace single": {
        "description": "singule replacement",
        "prefix": "awk:single-replacement",
        "body": [
            "awk '{ sub(\"${1:pattern}\", \"${2:replacement}\") }' ${3:path/to/file}"
        ]
    },
    "awk replace globally": {
        "description": "global replacement",
        "prefix": "awk:global-replacement",
        "body": [
            "awk '{ gsub(\"${1:pattern}\", \"${2:replacement}\") }' ${3:path/to/file}"
        ]
    },
    "description": {
        "description": "step or job description",
        "prefix": "description",
        "body": [
            "${1|Build,Lint,Test|} with ${2|`,',\"|}${3:tool}$2"
        ]
    },
    "command": {
        "description": "command",
        "prefix": "command",
        "body": [
            "echo \"::${1|debug,notice,error,endgroup,echo,add-mask,group,warning|} ${2:parameter=value...}::${3:value}\""
        ]
    },
    "trigger": {
        "description": "trigger definition",
        "prefix": "trigger",
        "body": [
            "on:",
            "  ${1:event}:",
            "    branches:",
            "    - ${2:branch}",
            "",
            "  workflow_dispatch:"
        ]
    },
    "step": {
        "description": "step definition",
        "prefix": "step",
        "body": [
            "- name: ${1:name}",
            "  run: |",
            "    $0"
        ]
    },
    "job": {
        "description": "job definition",
        "prefix": "job",
        "body": [
            "${1:job}:",
            "  name: ${2:name}",
            "  runs-on: ${3:os}",
            "  steps:",
            "  - uses: actions/checkout@v${4:3}",
            "  - run: |",
            "      $0"
        ]
    }
}